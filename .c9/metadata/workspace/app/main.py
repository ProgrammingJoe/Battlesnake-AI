{"filter":false,"title":"main.py","tooltip":"/app/main.py","undoManager":{"mark":81,"position":81,"stack":[[{"group":"doc","deltas":[{"start":{"row":167,"column":0},"end":{"row":167,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":1},"end":{"row":167,"column":3},"action":"insert","lines":["::"]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":1},"end":{"row":167,"column":3},"action":"remove","lines":["::"]},{"start":{"row":167,"column":1},"end":{"row":167,"column":2},"action":"insert","lines":["\""]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":2},"end":{"row":167,"column":4},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":190,"column":0},"end":{"row":190,"column":2},"action":"insert","lines":["\t\""]}]}],[{"group":"doc","deltas":[{"start":{"row":190,"column":2},"end":{"row":191,"column":1},"action":"insert","lines":["\"\"","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":1},"end":{"row":192,"column":1},"action":"insert","lines":["","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":1},"end":{"row":192,"column":6},"action":"insert","lines":["move "]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":6},"end":{"row":192,"column":8},"action":"insert","lines":["= "]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":8},"end":{"row":192,"column":14},"action":"insert","lines":["random"]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":14},"end":{"row":192,"column":15},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":15},"end":{"row":192,"column":19},"action":"insert","lines":["rand"]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":17},"end":{"row":192,"column":19},"action":"remove","lines":["nd"]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":5},"end":{"row":192,"column":17},"action":"remove","lines":[" = random.ra"]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":3},"end":{"row":192,"column":5},"action":"remove","lines":["ve"]}]}],[{"group":"doc","deltas":[{"start":{"row":192,"column":1},"end":{"row":192,"column":3},"action":"remove","lines":["mo"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":1},"end":{"row":192,"column":1},"action":"remove","lines":["","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":190,"column":3},"end":{"row":191,"column":1},"action":"remove","lines":["\"","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":190,"column":1},"end":{"row":190,"column":3},"action":"remove","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":1},"end":{"row":167,"column":4},"action":"remove","lines":["\"\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":1},"end":{"row":168,"column":1},"action":"remove","lines":[""," "]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":1},"end":{"row":167,"column":3},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":1},"end":{"row":167,"column":2},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":157,"column":19},"end":{"row":157,"column":25},"action":"remove","lines":["00ff00"]},{"start":{"row":157,"column":19},"end":{"row":157,"column":25},"action":"insert","lines":["EF0006"]}]}],[{"group":"doc","deltas":[{"start":{"row":189,"column":1},"end":{"row":190,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":2},"end":{"row":184,"column":4},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":0},"end":{"row":184,"column":2},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":183,"column":4},"end":{"row":184,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":0},"end":{"row":167,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":167,"column":0},"end":{"row":167,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":165,"column":30},"end":{"row":166,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":166,"column":1},"end":{"row":167,"column":1},"action":"insert","lines":["","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":166,"column":0},"end":{"row":166,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":165,"column":30},"end":{"row":166,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":165,"column":0},"end":{"row":165,"column":4},"action":"remove","lines":["    "]},{"start":{"row":165,"column":0},"end":{"row":165,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":166,"column":1},"end":{"row":167,"column":0},"action":"insert","lines":["",""]},{"start":{"row":167,"column":0},"end":{"row":167,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":197,"column":0},"end":{"row":197,"column":4},"action":"remove","lines":["    "]},{"start":{"row":197,"column":0},"end":{"row":197,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":199,"column":2},"end":{"row":199,"column":4},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":199,"column":0},"end":{"row":199,"column":2},"action":"remove","lines":["  "]},{"start":{"row":199,"column":0},"end":{"row":199,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":170,"column":0},"end":{"row":170,"column":4},"action":"remove","lines":["    "]},{"start":{"row":170,"column":0},"end":{"row":170,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":169,"column":0},"end":{"row":169,"column":4},"action":"remove","lines":["    "]},{"start":{"row":169,"column":0},"end":{"row":169,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":171,"column":0},"end":{"row":171,"column":8},"action":"remove","lines":["        "]},{"start":{"row":171,"column":0},"end":{"row":171,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":172,"column":0},"end":{"row":172,"column":12},"action":"remove","lines":["            "]},{"start":{"row":172,"column":0},"end":{"row":172,"column":3},"action":"insert","lines":["\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":4},"end":{"row":169,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":4},"end":{"row":169,"column":0},"action":"insert","lines":["",""]},{"start":{"row":169,"column":0},"end":{"row":169,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":173,"column":0},"end":{"row":173,"column":16},"action":"remove","lines":["                "]},{"start":{"row":173,"column":0},"end":{"row":173,"column":3},"action":"insert","lines":["\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":173,"column":3},"end":{"row":173,"column":4},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":0},"end":{"row":144,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":169,"column":4},"end":{"row":169,"column":5},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":0},"end":{"row":144,"column":1},"action":"remove","lines":["r"]},{"start":{"row":144,"column":0},"end":{"row":144,"column":1},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":0},"end":{"row":144,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":3},"end":{"row":168,"column":4},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":145,"column":3},"end":{"row":145,"column":4},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":2},"end":{"row":168,"column":3},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":1},"end":{"row":168,"column":2},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":0},"end":{"row":168,"column":1},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":145,"column":0},"end":{"row":145,"column":3},"action":"remove","lines":["   "]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":16},"end":{"row":168,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":173,"column":0},"end":{"row":173,"column":12},"action":"remove","lines":["            "]},{"start":{"row":173,"column":0},"end":{"row":173,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":173,"column":2},"end":{"row":173,"column":3},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":145,"column":0},"end":{"row":145,"column":2},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":173,"column":1},"end":{"row":173,"column":3},"action":"remove","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":3},"end":{"row":168,"column":4},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":145,"column":0},"end":{"row":145,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":2},"end":{"row":168,"column":3},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":1},"end":{"row":168,"column":2},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":145,"column":2},"end":{"row":145,"column":4},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":168,"column":0},"end":{"row":168,"column":1},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":16},"end":{"row":168,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":145,"column":0},"end":{"row":145,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":16},"end":{"row":168,"column":0},"action":"insert","lines":["",""]},{"start":{"row":168,"column":0},"end":{"row":168,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":167,"column":16},"end":{"row":168,"column":1},"action":"insert","lines":[""," "]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":10},"end":{"row":179,"column":12},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":7},"end":{"row":179,"column":10},"action":"remove","lines":["   "]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":4},"end":{"row":179,"column":7},"action":"remove","lines":["   "]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":1},"end":{"row":179,"column":4},"action":"remove","lines":["   "]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":0},"end":{"row":179,"column":1},"action":"remove","lines":[" "]},{"start":{"row":179,"column":0},"end":{"row":179,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":1},"end":{"row":179,"column":3},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":3},"end":{"row":179,"column":4},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":174,"column":1},"end":{"row":174,"column":3},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":174,"column":2},"end":{"row":174,"column":3},"action":"remove","lines":["\t"]},{"start":{"row":179,"column":3},"end":{"row":179,"column":4},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":174,"column":1},"end":{"row":174,"column":2},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":202,"column":34},"action":"remove","lines":["import bottle","import json","import heapq","import random","","################################################################################","# Constants                                                                    #","################################################################################","snakeName = 'snakes-on-a-plane'","directions = {","\t(-1, 0): 'left',","\t(1, 0): 'right',","\t(0, -1): 'up',","\t(0, 1): 'down'","}","","################################################################################","# Classes                                                                      #","################################################################################","","##","# Basic priority queue, minimum value at top","#","class PriorityQueue:","\tdef __init__(self):","\t\tself.elements = []","\t","\tdef empty(self):","\t\treturn len(self.elements) == 0","\t","\tdef enqueue(self, element, priority):","\t\theapq.heappush(self.elements, (priority, element))","\t","\tdef dequeue(self):","\t\treturn heapq.heappop(self.elements)[1]","","##","# Used for converting backwards path returned by A* to forwards, also finding","# direction to move","#","class Path:","\tdef cameFrom(cameFrom, goal):","\t\tgoTo = { goal: None }","\t\tstart = goal","\t\twhile cameFrom[start]:","\t\t\tgoTo[cameFrom[start]] = start","\t\t\tstart = cameFrom[start]","\t\treturn Path(goTo, start)","","\tdef __init__(self, goTo, start):","\t\tself.goTo = goTo","\t\tself.start = start","","\tdef direction(self):","\t\tnxt = self.goTo[self.start]","\t\treturn (nxt[0] - self.start[0], nxt[1] - self.start[1])","","##","# Grid to use for pathfinding, has obstructions to be navigated around","#","class Grid:","\tdef __init__(self, width, height):","\t\tself.width = width","\t\tself.height = height","\t\tself.cells = [ [ 0 for y in range(height) ] for x in range(width) ]","\t","\t# Finds a random, unobstructed cell on the grid","\tdef random(self):","\t\tcell = None","\t\twhile cell == None or self.obstructed(cell):","\t\t\tx = random.randint(0, self.width - 1)","\t\t\ty = random.randint(0, self.height - 1)","\t\t\tcell = (x, y)","\t\treturn cell","","\t# Checks if the grid contains a cell","\tdef contains(self, cell):","\t\treturn (cell[0] >= 0","\t\t\tand cell[1] >= 0","\t\t\tand cell[0] < self.width","\t\t\tand cell[1] < self.height)","","\t# Obstructs a cell on the grid","\tdef obstruct(self, cell):","\t\tself.cells[cell[0]][cell[1]] = 1","\t","\t# Checks if a cell on the grid is obstructed","\tdef obstructed(self, cell):","\t\treturn self.cells[cell[0]][cell[1]] == 1","","\t# Heuristic for pathfinding, not currently used for anything","\t# most likely use it to represent risk","\tdef heuristic(self, cell):","\t\treturn self.cells[cell[0]][cell[1]]","","\t# Finds neighbours to a cell on the grid","\tdef neighbours(self, cell):","\t\tneighbours = []","\t\tfor direction in directions:","\t\t\tneighbour = (cell[0] + direction[0], cell[1] + direction[1])","\t\t\t","\t\t\t# Check if on grid, and not obstructed","\t\t\tif self.contains(neighbour) and not self.obstructed(neighbour):","\t\t\t\tneighbours.append(neighbour)","\t\t","\t\treturn neighbours","","################################################################################","# Functions                                                                    #","################################################################################","","# xDist + yDist","def manDist(a, b):","\treturn abs(a[0] - b[0]) + abs(a[1] - b[1])","","# A* search, uses grid's heuristic","def aStar(grid, start, goal):","\tfrontier = PriorityQueue()","\tfrontier.enqueue(start, 0)","\tcameFrom = { start: None }","\tcostSoFar = { start: 0 }","","\twhile not frontier.empty():","\t\tcurrent = frontier.dequeue()","\t\tif current == goal:","\t\t\treturn Path.cameFrom(cameFrom, goal)","","\t\tfor neighbour in grid.neighbours(current):","\t\t\tcost = costSoFar[current] + grid.heuristic(neighbour)","","\t\t\tif neighbour not in costSoFar or cost < costSoFar[neighbour]:","\t\t\t\tcostSoFar[neighbour] = cost","\t\t\t\tpriority = cost + manDist(neighbour, goal)","\t\t\t\tfrontier.enqueue(neighbour, priority)","\t\t\t\tcameFrom[neighbour] = current","\treturn False","","","################################################################################","# Server                                                                       #","################################################################################","","@bottle.get('/')","def index():","\treturn \"\"\"","\t\t  <a href=\"https://github.com/sendwithus/battlesnake-python\">","            battlesnake-python","        </a>","    \"\"\"","","","@bottle.post('/start')","def start():","    data = bottle.request.json","","    return json.dumps({","        'name': snakeName,","        'color': '#EF0006',","        'head_url': 'http://battlesnake-python.herokuapp.com',","        'taunt': 'battlesnake-python!'","    })","","","@bottle.post('/move')","def move():","\tdata = bottle.request.json","\t","\tourSnake = None"," ","\tgrid = Grid(len(data.board[0]), len(data.board))","\tfor snake in data.snakes:","\t\tif snake.state == \"alive\":","\t\t\tfor coord in snake.coords:","\t\t\t\tgrid.obstruct(coord)","\t\t\tif snake.name != snakeName:","                for direction in directions:","                    head = snake.coords[0]","                    movement = (head[0] + direction[0], head[1] + direction[1])","                    grid.obstruct(movement)","\t\t\telse:","                ourSnake = snake","            ","    path = aStar(grid, ourSnake.coords[0], data.food[0])","    ","    move = 'left'","    ","    if path != False:","        move = directions[path.direction()]","\t","    return json.dumps({","        'move': move,","        'taunt': 'battlesnake-python!'","    })","","","@bottle.post('/end')","def end():","\tdata = bottle.request.json","","\treturn json.dumps({})","","# Expose WSGI app","application = bottle.default_app()"]},{"start":{"row":0,"column":0},"end":{"row":202,"column":34},"action":"insert","lines":["import bottle","import json","import heapq","import random","","################################################################################","# Constants                                                                    #","################################################################################","snakeName = 'snakes-on-a-plane'","directions = {","\t(-1, 0): 'left',","\t(1, 0): 'right',","\t(0, -1): 'up',","\t(0, 1): 'down'","}","","################################################################################","# Classes                                                                      #","################################################################################","","##","# Basic priority queue, minimum value at top","#","class PriorityQueue:","\tdef __init__(self):","\t\tself.elements = []","\t","\tdef empty(self):","\t\treturn len(self.elements) == 0","\t","\tdef enqueue(self, element, priority):","\t\theapq.heappush(self.elements, (priority, element))","\t","\tdef dequeue(self):","\t\treturn heapq.heappop(self.elements)[1]","","##","# Used for converting backwards path returned by A* to forwards, also finding","# direction to move","#","class Path:","\tdef cameFrom(cameFrom, goal):","\t\tgoTo = { goal: None }","\t\tstart = goal","\t\twhile cameFrom[start]:","\t\t\tgoTo[cameFrom[start]] = start","\t\t\tstart = cameFrom[start]","\t\treturn Path(goTo, start)","","\tdef __init__(self, goTo, start):","\t\tself.goTo = goTo","\t\tself.start = start","","\tdef direction(self):","\t\tnxt = self.goTo[self.start]","\t\treturn (nxt[0] - self.start[0], nxt[1] - self.start[1])","","##","# Grid to use for pathfinding, has obstructions to be navigated around","#","class Grid:","\tdef __init__(self, width, height):","\t\tself.width = width","\t\tself.height = height","\t\tself.cells = [ [ 0 for y in range(height) ] for x in range(width) ]","\t","\t# Finds a random, unobstructed cell on the grid","\tdef random(self):","\t\tcell = None","\t\twhile cell == None or self.obstructed(cell):","\t\t\tx = random.randint(0, self.width - 1)","\t\t\ty = random.randint(0, self.height - 1)","\t\t\tcell = (x, y)","\t\treturn cell","","\t# Checks if the grid contains a cell","\tdef contains(self, cell):","\t\treturn (cell[0] >= 0","\t\t\tand cell[1] >= 0","\t\t\tand cell[0] < self.width","\t\t\tand cell[1] < self.height)","","\t# Obstructs a cell on the grid","\tdef obstruct(self, cell):","\t\tself.cells[cell[0]][cell[1]] = 1","\t","\t# Checks if a cell on the grid is obstructed","\tdef obstructed(self, cell):","\t\treturn self.cells[cell[0]][cell[1]] == 1","","\t# Heuristic for pathfinding, not currently used for anything","\t# most likely use it to represent risk","\tdef heuristic(self, cell):","\t\treturn self.cells[cell[0]][cell[1]]","","\t# Finds neighbours to a cell on the grid","\tdef neighbours(self, cell):","\t\tneighbours = []","\t\tfor direction in directions:","\t\t\tneighbour = (cell[0] + direction[0], cell[1] + direction[1])","\t\t\t","\t\t\t# Check if on grid, and not obstructed","\t\t\tif self.contains(neighbour) and not self.obstructed(neighbour):","\t\t\t\tneighbours.append(neighbour)","\t\t","\t\treturn neighbours","","################################################################################","# Functions                                                                    #","################################################################################","","# xDist + yDist","def manDist(a, b):","\treturn abs(a[0] - b[0]) + abs(a[1] - b[1])","","# A* search, uses grid's heuristic","def aStar(grid, start, goal):","\tfrontier = PriorityQueue()","\tfrontier.enqueue(start, 0)","\tcameFrom = { start: None }","\tcostSoFar = { start: 0 }","","\twhile not frontier.empty():","\t\tcurrent = frontier.dequeue()","\t\tif current == goal:","\t\t\treturn Path.cameFrom(cameFrom, goal)","","\t\tfor neighbour in grid.neighbours(current):","\t\t\tcost = costSoFar[current] + grid.heuristic(neighbour)","","\t\t\tif neighbour not in costSoFar or cost < costSoFar[neighbour]:","\t\t\t\tcostSoFar[neighbour] = cost","\t\t\t\tpriority = cost + manDist(neighbour, goal)","\t\t\t\tfrontier.enqueue(neighbour, priority)","\t\t\t\tcameFrom[neighbour] = current","\treturn False","","","################################################################################","# Server                                                                       #","################################################################################","","@bottle.get('/')","def index():","\treturn \"\"\"","\t\t  <a href=\"https://github.com/sendwithus/battlesnake-python\">","\t\t\tbattlesnake-python","\t\t</a>","\t\"\"\"","","","@bottle.post('/start')","def start():","\tdata = bottle.request.json","","\treturn json.dumps({","\t\t'name': snakeName,","\t\t'color': '#EF0006',","\t\t'head_url': 'http://battlesnake-python.herokuapp.com',","\t\t'taunt': 'battlesnake-python!'","\t})","","","@bottle.post('/move')","def move():","\tdata = bottle.request.json","\t","\tourSnake = None"," ","\tgrid = Grid(len(data.board[0]), len(data.board))","\tfor snake in data.snakes:","\t\tif snake.state == \"alive\":","\t\t\tfor coord in snake.coords:","\t\t\t\tgrid.obstruct(coord)","\t\t\tif snake.name != snakeName:","\t\t\t\tfor direction in directions:","\t\t\t\t\thead = snake.coords[0]","\t\t\t\t\tmovement = (head[0] + direction[0], head[1] + direction[1])","\t\t\t\t\tgrid.obstruct(movement)","\t\t\telse:","\t\t\t\tourSnake = snake","\t\t\t","\tpath = aStar(grid, ourSnake.coords[0], data.food[0])","\t","\tmove = 'left'","\t","\tif path != False:","\t\tmove = directions[path.direction()]","\t","\treturn json.dumps({","\t\t'move': move,","\t\t'taunt': 'battlesnake-python!'","\t})","","","@bottle.post('/end')","def end():","\tdata = bottle.request.json","","\treturn json.dumps({})","","# Expose WSGI app","application = bottle.default_app()"]}]}]]},"ace":{"folds":[],"scrolltop":409.00025749206543,"scrollleft":0,"selection":{"start":{"row":43,"column":14},"end":{"row":43,"column":14},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":23,"state":"start","mode":"ace/mode/python"}},"timestamp":1424556538617,"hash":"5595e356a8f97a4e3e77b9a2732dcb18b657adbe"}