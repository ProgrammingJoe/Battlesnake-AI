{"changed":true,"filter":false,"title":"main.py","tooltip":"/app/main.py","value":"import bottle\nimport json\nimport heapq\nimport random\nimport copy\n\n################################################################################\n# Taunts                                                                    #\n################################################################################\n\ntList = ['Feel the power of the mongoose!','I like to move it move it!','Listen to my mix tape!','You wanna go bruh? Wanna go? HUH?','Staying alive! Staying alive!','Pretty good eh?','Do you fear death?','Let of some ssssssteam...','PURGEEEEEEEE','Come on, kill meeee!','You require more Vespene Gas!','You require more pylons!','Require more overlords!!!','Fear the power of the force...','My goose is bigger than yours!']\nlenTList = len(tList)-1\n################################################################################\n# Constants                                                                    #\n################################################################################\nsnakeName = 'snakes-on-a-plane'\ndirections = {\n\t(-1, 0): 'left',\n\t(1, 0): 'right',\n\t(0, -1): 'up',\n\t(0, 1): 'down'\n}\n\ntrapSamples = 10\n#trapEscapePercentageNeeded = 0.5\nidlePathSamples = 10\n\n################################################################################\n# Classes                                                                      #\n################################################################################\n\n##\n# Basic priority queue, minimum value at top\n#\nclass PriorityQueue:\n\tdef __init__(self):\n\t\tself.elements = []\n\t\n\tdef empty(self):\n\t\treturn len(self.elements) == 0\n\t\n\tdef enqueue(self, element, priority):\n\t\theapq.heappush(self.elements, (priority, element))\n\t\n\tdef dequeue(self):\n\t\treturn heapq.heappop(self.elements)[1]\n\n##\n# Used for converting backwards path returned by A* to forwards, also finding\n# direction to move\n#\n\ndef pathCameFrom(cameFrom, goal):\n\tgoTo = { goal: None }\n\tstart = goal\n\twhile cameFrom[start]:\n\t\tgoTo[cameFrom[start]] = start\n\t\tstart = cameFrom[start]\n\treturn Path(goTo, start)\n\nclass Path:\n\tdef __init__(self, goTo, start):\n\t\tself.goTo = goTo\n\t\tself.start = start\n\n\tdef direction(self):\n\t\tnxt = self.goTo[self.start]\n\t\treturn (nxt[0] - self.start[0], nxt[1] - self.start[1])\n\n##\n# Grid to use for pathfinding, has obstructions to be navigated around\n#\nclass Grid:\n\tdef __init__(self, width, height):\n\t\tself.width = width\n\t\tself.height = height\n\t\tself.cells = [ [ 0 for y in range(height) ] for x in range(width) ]\n\t\n\t# Finds a random, unobstructed cell on the grid\n\tdef random(self):\n\t\tcell = None\n\t\twhile cell == None or self.obstructed(cell):\n\t\t\tx = random.randint(0, self.width - 1)\n\t\t\ty = random.randint(0, self.height - 1)\n\t\t\tcell = (x, y)\n\t\treturn cell\n\n\t# Checks if the grid contains a cell\n\tdef contains(self, cell):\n\t\treturn (cell[0] >= 0\n\t\t\tand cell[1] >= 0\n\t\t\tand cell[0] < self.width\n\t\t\tand cell[1] < self.height)\n\n\t# Obstructs a cell on the grid\n\tdef obstruct(self, cell):\n\t\tif self.contains(cell):\n\t\t\tself.cells[cell[0]][cell[1]] = 1\n\t\t\n\t# Checks if a cell on the grid is obstructed\n\tdef obstructed(self, cell):\n\t\treturn self.cells[cell[0]][cell[1]] == 1\n\n\t# Heuristic for pathfinding, not currently used for anything\n\t# most likely use it to represent risk\n\tdef heuristic(self, cell):\n\t\treturn self.cells[cell[0]][cell[1]]\n\n\t# Finds neighbours to a cell on the grid\n\tdef neighbours(self, cell):\n\t\tneighbours = []\n\t\tfor direction in directions:\n\t\t\tneighbour = (cell[0] + direction[0], cell[1] + direction[1])\n\t\t\t\n\t\t\t# Check if on grid, and not obstructed\n\t\t\tif self.contains(neighbour) and not self.obstructed(neighbour):\n\t\t\t\tneighbours.append(neighbour)\n\t\t\n\t\treturn neighbours\n\n################################################################################\n# Functions                                                                    #\n################################################################################\n\n# xDist + yDist\ndef manDist(a, b):\n\treturn abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n# A* search, uses grid's heuristic\ndef aStar(grid, start, goal):\n\tfrontier = PriorityQueue()\n\tfrontier.enqueue(start, 0)\n\tcameFrom = { start: None }\n\tcostSoFar = { start: 0 }\n\n\twhile not frontier.empty():\n\t\tcurrent = frontier.dequeue()\n\t\tif current == goal:\n\t\t\treturn pathCameFrom(cameFrom, goal)\n\n\t\tfor neighbour in grid.neighbours(current):\n\t\t\tcost = costSoFar[current] + grid.heuristic(neighbour)\n\n\t\t\tif neighbour not in costSoFar or cost < costSoFar[neighbour]:\n\t\t\t\tcostSoFar[neighbour] = cost\n\t\t\t\tpriority = cost + manDist(neighbour, goal)\n\t\t\t\tfrontier.enqueue(neighbour, priority)\n\t\t\t\tcameFrom[neighbour] = current\n\treturn False\n\n\"\"\"\ndef ratePosition(grid, start, samples):\n\t\tpasses = 0\n\t\tfor i in range(samples):\n\t\t\tgoal = grid.random()\n\t\t\tif aStar(grid, start, goal):\n\t\t\t\tpasses += 1\n\t\treturn float(passes) / samples\n\ndef isTrap(grid, start):\n\tscore = ratePosition(grid, start, trapSamples)\n\treturn score < trapEscapePercentageNeeded\n\ndef isPathTrap(grid, path):\t\t#determine if we take a path or not\n\tgrid = copy.deepcopy(grid)\t#makes grid copy\n\tcurr = path.start\t\t\t#create iterator\n\tgrid.obstruct(curr)\t\t\t#go through grid and obstruct it\n\twhile path.goTo[curr]:\t\t#\n\t\tgrid.obstruct(curr)\n\t\tcurr = path.goTo[curr]\n\treturn isTrap(grid, curr)\n\"\"\"\n\ndef isPositionBetter(grid, snake, current, pathTo, to):\n\t# Passes\n\tcurrentPasses = 0\n\ttoPasses = 0\n\t\n\t# New grid\n\ttoGrid = copy.deepcopy(grid)\n\t\n\t# Loop over path and count\n\tcurr = current\n\tcount = 0\n\twhile pathTo.goTo[curr]:\t\t#\n\t\tcurr = pathTo.goTo[curr]\n\t\tcount += 1\n\n\tx = len(snake['coords']) - count\n\twhile x > 0:\n\t\ttoGrid.obstruct(snake['coords'][x - 1])\n\t\tx -= 1\n\n\tif len(snake['coords']) >= count:\n\t\tcurr = current\n\t\tcurr = pathTo.goTo[curr]\n\t\twhile curr:\n\t\t\ttoGrid.obstruct(curr)\n\t\t\tcurr = pathTo.goTo[curr]\n\telse:\n\t\tcurr = current\n\t\tcurr = pathTo.goTo[curr]\n\t\tindex = 0\n\t\twhile curr:\n\t\t\tif index >= count - len(snake['coords']):\n\t\t\t\ttoGrid.obstruct(curr)\n\t\t\tcurr = pathTo.goTo[curr]\n\t\t\tindex += 1\n\t\t\n\tfor _ in range(trapSamples):\n\t\tgoal = grid.random()\n\t\tif aStar(grid, current, goal):\n\t\t\tcurrentPasses += 1\n\t\tif aStar(toGrid, to, goal):\n\t\t\ttoPasses += 1\n\treturn toPasses < currentPasses\n\n\n################################################################################\n# Server                                                                       #\n################################################################################\n\n@bottle.get('/')\ndef index():\n\treturn \"\"\"<a href=\"https://github.com/sendwithus/battlesnake-python\">battlesnake-python</a>\"\"\"\n#-------------------------------------------------------------------------------\n@bottle.post('/start')\ndef start():\n\tdata = bottle.request.json\n\t# Request:\n\t#\tgame_id, width, height\n\t\n\treturn json.dumps({\n\t\t'name': snakeName,\n\t\t'color': '#8B3626',\n\t\t'head_url': 'http://i.imgur.com/7hhZkaN.gif',\n\t\t'taunt': 'GRAWWRRGGGGGGGGGG!'\n\t})\n#-------------------------------------------------------------------------------\n@bottle.post('/move')\ndef move():\n\tdata = bottle.request.json\n\t# Request:\n\t#\tgame_id, turn, board, snakes, food\n\t\n\tourSnake = None\n \t\n \t# Find our snake\n \tfor snake in data['snakes']:\n \t\tif snake['name'] == snakeName:\n \t\t\tourSnake = snake\n \t\t\tbreak\n \t\n\tgrid = Grid(len(data['board'][0]), len(data['board']))\t\t\t\t#makes base grid\n\tfor snake in data['snakes']:\t\t\t\t\t\t\t\t\t\t#sorts through snakes\n\t\tfor coord in snake['coords']:\t\t\t\t\t\t\t\t\t#get all snake coords\n\t\t\tgrid.obstruct(tuple(coord))\t\t\t\t\t\t\t\t\t#make obstructions\n\t\tif snake['name'] != snakeName:\t\t\t\t\t\t\t\t\t#if snake is not our snake\n\t\t\tfor direction in directions:\t\t\t\t\t\t\t\t#make all snake heads a obstruction\n\t\t\t\tif len(snake['coords']) >= len(ourSnake['coords']): \t# if other snake larger, then obstruct where it can move to\n\t\t\t\t\thead = snake['coords'][0]\t\t\t\t\t\t\t#\n\t\t\t\t\tmovement = (head[0] + direction[0], head[1] + direction[1])\t#\n\t\t\t\t\tgrid.obstruct(movement)\t\t\t\t\t\t\t\t#\n\t\n\t#-------GET FOODS\n\tpossibleFoods = []\n\tfor food in data['food']:\n\t\tdist = manDist(tuple(ourSnake['coords'][0]), tuple(food))\n\t\tskip = False\n\t\tfor snake in data['snakes']:\n\t\t\tif snake['name'] != snakeName and manDist(tuple(snake['coords'][0]), tuple(food)) <= dist:\n\t\t\t\tskip = True\n\t\t\t\tbreak\n\t\tif not skip:\n\t\t\tpossibleFoods.append(tuple(food))\n\t\t\t\n\t#-------GET CLOSEST FOOD\n\tclosestFoodDist = 0\n\tclosestFood = None\n\tfor food in possibleFoods:\n\t\td = manDist(tuple(ourSnake['coords'][0]), food)\n\t\tif d < closestFoodDist or closestFood == None:\n\t\t\tclosestFood = food\n\t\t\tclosestFoodDist = d\n\tidle = False\n\t\n\tif closestFood != None:\n\t\tpath = aStar(grid, tuple(ourSnake['coords'][0]), closestFood)\n\t\tif path != False and not isPositionBetter(grid, ourSnake, tuple(ourSnake['coords'][0]), path, closestFood):\n\t\t\tmove = directions[path.direction()]\n\t\telse:\n\t\t\tidle = True\n\telse:\n\t\tidle = True\n\t\n\t\n\t#------IDLE MOVEMENTS\n\tsimpleMovements = False\n\tif idle:\n\t\tpath = False\n\t\tind = 0\n\t\twhile not path and ind < idlePathSamples:\n\t\t\tgoal = grid.random()\n\t\t\ttmpPath = aStar(grid, tuple(ourSnake['coords'][0]), goal)\n\t\t\tif tmpPath != False and not isPositionBetter(grid, ourSnake, tuple(ourSnake['coords'][0]), tmpPath, goal):\n\t\t\t\tpath = tmpPath\n\t\t\tind+= 1\n\t\tif path:\n\t\t\tmove = directions[path.direction()]\n\t\telse:\n\t\t\tsimpleMovements = True\n\t\t\t\n\tif simpleMovements:\n\t\tpath = False\n\t\tind = 0\n\t\twhile not path and ind < idlePathSamples:\n\t\t\tgoal = grid.random()\n\t\t\ttmpPath = aStar(grid, tuple(ourSnake['coords'][0]), goal)\n\t\t\tif tmpPath != False:\n\t\t\t\tpath = tmpPath\n\t\tif path:\n\t\t\tmove = directions[path.direction()]\n\t\n\t\n\t#------DIRECTION CHECK ***FAILSAFE***\n\theadCheck = snake['coords'][0]\n\tcheckX = headCheck[0]\n\tcheckY = headCheck[1]\n\tcheckDirection = False\n\tcheckLeft = False\n\tcheckRight = False\n\tcheckUp = False\n\tcheckDown = False\n\twhile(not checkDirection):\n\t\tif checkLeft and checkRight and checkUp and checkDown:\n\t\t\tcheckDirection = True\n\t\tif move == 'left':#check left\n\t\t\tcheckLeft = True\n\t\t\tif (checkX-1 < 0) or (grid.obstructed((checkX-1,checkY))):\n\t\t\t\tif not checkUp:\n\t\t\t\t\tmove = 'up'#can up?\n\t\t\t\telif not checkDown:\n\t\t\t\t\tmove = 'down'#can down?\n\t\t\t\telse:\n\t\t\t\t\t#move = 'right'#kill self with right\n\t\t\t\t\tcheckDirection = True\n\t\t\telse:\n\t\t\t\tcheckDirection = True\n\t\telif move == 'right': #check right\n\t\t\tcheckright = True\n\t\t\tif (checkX+1 > grid.width-1) or (grid.obstructed((checkX+1,checkY))):\n\t\t\t\tif not checkUp:\n\t\t\t\t\tmove = 'up'#can up?\n\t\t\t\telif not checkDown:\n\t\t\t\t\tmove = 'down'#can down?\n\t\t\t\telse:\n\t\t\t\t\t#move = 'left' #kill self with left\n\t\t\t\t\tcheckDirection = True\n\t\t\telse:\n\t\t\t\tcheckDirection = True\n\t\telif move == 'up':#check up\n\t\t\tcheckUp = True\n\t\t\tif (checkY-1 < 0) or (grid.obstructed((checkX,checkY-1))):\n\t\t\t\tif not checkRight:\n\t\t\t\t\tmove = 'right'#can right?\n\t\t\t\telif not checkLeft:\n\t\t\t\t\tmove = 'left'#can left?\n\t\t\t\telse:\n\t\t\t\t\t#move = 'down'#kill self with down\n\t\t\t\t\tcheckDirection = True\n\t\t\telse:\n\t\t\t\tcheckDirection = True\n\t\telif move == 'down':#check down\n\t\t\tcheckDown = True\n\t\t\tif (checkY+1 > grid.height-1) or (grid.obstructed((checkX,checkY+1))):\n\t\t\t\tif not checkRight:\n\t\t\t\t\tmove = 'right'#can right?\n\t\t\t\telif not checkLeft:\n\t\t\t\t\tmove = 'left'#can left?\n\t\t\t\telse:\n\t\t\t\t\t#move = 'up'#kill self with up\n\t\t\t\t\tcheckDirection = True\n\t\t\telse:\n\t\t\t\tcheckDirection = True\n\t#TO ADD: make so that it can check end of snakes adjacent to find openings\n\t#\t\t \n\t\n\t#------------------RETURN TO SERVER-----------\n\treturn json.dumps({\n\t\t'move': move,\n\t\t'taunt': tList[random.randint(0,lenTList)]\n\t})\n\t#---------------------------------------------\n\t\n\t\n#-------------------------------------------------------------------------------\n@bottle.post('/end')\ndef end():\n\tdata = bottle.request.json\n\t# Request:\n\t#\tgame_id\n\n\treturn json.dumps({})\n#-------------------------------------------------------------------------------\n# Expose WSGI app\napplication = bottle.default_app()","undoManager":{"mark":80,"position":88,"stack":[[{"group":"doc","deltas":[{"start":{"row":203,"column":15},"end":{"row":203,"column":19},"action":"insert","lines":["coun"]}]}],[{"group":"doc","deltas":[{"start":{"row":203,"column":19},"end":{"row":203,"column":22},"action":"insert","lines":["t 0"]}]}],[{"group":"doc","deltas":[{"start":{"row":203,"column":21},"end":{"row":203,"column":22},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":203,"column":21},"end":{"row":203,"column":23},"action":"insert","lines":["- "]}]}],[{"group":"doc","deltas":[{"start":{"row":394,"column":34},"end":{"row":394,"column":53},"action":"remove","lines":["ottle.default_app()"]}]}],[{"group":"doc","deltas":[{"start":{"row":394,"column":34},"end":{"row":394,"column":53},"action":"insert","lines":["ottle.default_app()"]}]}],[{"group":"doc","deltas":[{"start":{"row":394,"column":34},"end":{"row":394,"column":53},"action":"remove","lines":["ottle.default_app()"]}]}],[{"group":"doc","deltas":[{"start":{"row":324,"column":1},"end":{"row":324,"column":2},"action":"insert","lines":["#"]},{"start":{"row":325,"column":1},"end":{"row":325,"column":2},"action":"insert","lines":["#"]},{"start":{"row":326,"column":1},"end":{"row":326,"column":2},"action":"insert","lines":["#"]},{"start":{"row":327,"column":1},"end":{"row":327,"column":2},"action":"insert","lines":["#"]},{"start":{"row":328,"column":1},"end":{"row":328,"column":2},"action":"insert","lines":["#"]},{"start":{"row":329,"column":1},"end":{"row":329,"column":2},"action":"insert","lines":["#"]},{"start":{"row":330,"column":1},"end":{"row":330,"column":2},"action":"insert","lines":["#"]},{"start":{"row":331,"column":1},"end":{"row":331,"column":2},"action":"insert","lines":["#"]},{"start":{"row":332,"column":1},"end":{"row":332,"column":2},"action":"insert","lines":["#"]},{"start":{"row":333,"column":1},"end":{"row":333,"column":2},"action":"insert","lines":["#"]},{"start":{"row":334,"column":1},"end":{"row":334,"column":2},"action":"insert","lines":["#"]},{"start":{"row":335,"column":1},"end":{"row":335,"column":2},"action":"insert","lines":["#"]},{"start":{"row":336,"column":1},"end":{"row":336,"column":2},"action":"insert","lines":["#"]},{"start":{"row":337,"column":1},"end":{"row":337,"column":2},"action":"insert","lines":["#"]},{"start":{"row":338,"column":1},"end":{"row":338,"column":2},"action":"insert","lines":["#"]},{"start":{"row":339,"column":1},"end":{"row":339,"column":2},"action":"insert","lines":["#"]},{"start":{"row":340,"column":1},"end":{"row":340,"column":2},"action":"insert","lines":["#"]},{"start":{"row":341,"column":1},"end":{"row":341,"column":2},"action":"insert","lines":["#"]},{"start":{"row":342,"column":1},"end":{"row":342,"column":2},"action":"insert","lines":["#"]},{"start":{"row":343,"column":1},"end":{"row":343,"column":2},"action":"insert","lines":["#"]},{"start":{"row":344,"column":1},"end":{"row":344,"column":2},"action":"insert","lines":["#"]},{"start":{"row":345,"column":1},"end":{"row":345,"column":2},"action":"insert","lines":["#"]},{"start":{"row":346,"column":1},"end":{"row":346,"column":2},"action":"insert","lines":["#"]},{"start":{"row":347,"column":1},"end":{"row":347,"column":2},"action":"insert","lines":["#"]},{"start":{"row":348,"column":1},"end":{"row":348,"column":2},"action":"insert","lines":["#"]},{"start":{"row":349,"column":1},"end":{"row":349,"column":2},"action":"insert","lines":["#"]},{"start":{"row":350,"column":1},"end":{"row":350,"column":2},"action":"insert","lines":["#"]},{"start":{"row":351,"column":1},"end":{"row":351,"column":2},"action":"insert","lines":["#"]},{"start":{"row":352,"column":1},"end":{"row":352,"column":2},"action":"insert","lines":["#"]},{"start":{"row":353,"column":1},"end":{"row":353,"column":2},"action":"insert","lines":["#"]},{"start":{"row":354,"column":1},"end":{"row":354,"column":2},"action":"insert","lines":["#"]},{"start":{"row":355,"column":1},"end":{"row":355,"column":2},"action":"insert","lines":["#"]},{"start":{"row":356,"column":1},"end":{"row":356,"column":2},"action":"insert","lines":["#"]},{"start":{"row":357,"column":1},"end":{"row":357,"column":2},"action":"insert","lines":["#"]},{"start":{"row":358,"column":1},"end":{"row":358,"column":2},"action":"insert","lines":["#"]},{"start":{"row":359,"column":1},"end":{"row":359,"column":2},"action":"insert","lines":["#"]},{"start":{"row":360,"column":1},"end":{"row":360,"column":2},"action":"insert","lines":["#"]},{"start":{"row":361,"column":1},"end":{"row":361,"column":2},"action":"insert","lines":["#"]},{"start":{"row":362,"column":1},"end":{"row":362,"column":2},"action":"insert","lines":["#"]},{"start":{"row":363,"column":1},"end":{"row":363,"column":2},"action":"insert","lines":["#"]},{"start":{"row":364,"column":1},"end":{"row":364,"column":2},"action":"insert","lines":["#"]},{"start":{"row":365,"column":1},"end":{"row":365,"column":2},"action":"insert","lines":["#"]},{"start":{"row":366,"column":1},"end":{"row":366,"column":2},"action":"insert","lines":["#"]},{"start":{"row":367,"column":1},"end":{"row":367,"column":2},"action":"insert","lines":["#"]},{"start":{"row":368,"column":1},"end":{"row":368,"column":2},"action":"insert","lines":["#"]},{"start":{"row":369,"column":1},"end":{"row":369,"column":2},"action":"insert","lines":["#"]},{"start":{"row":370,"column":1},"end":{"row":370,"column":2},"action":"insert","lines":["#"]},{"start":{"row":371,"column":1},"end":{"row":371,"column":2},"action":"insert","lines":["#"]},{"start":{"row":372,"column":1},"end":{"row":372,"column":2},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":535},"end":{"row":10,"column":537},"action":"remove","lines":["A'"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":511},"end":{"row":10,"column":535},"action":"remove","lines":["AAAAAAAAAAAAAAAAAAAAAAAA"]},{"start":{"row":10,"column":503},"end":{"row":10,"column":511},"action":"remove","lines":["AAAAAAAA"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":480},"end":{"row":10,"column":503},"action":"remove","lines":["AAAAAAAAAAAAAAAAAAAAAAA"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":453},"end":{"row":10,"column":480},"action":"remove","lines":["AAAAAAAAAAAAAAAAAAAAAAAAAAA"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":431},"end":{"row":10,"column":453},"action":"remove","lines":["AAAAAAAAAAAAAAAAAAAAAA"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":424},"end":{"row":10,"column":431},"action":"remove","lines":["GRAAAAA"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":422},"end":{"row":10,"column":424},"action":"remove","lines":[",'"]}]}],[{"group":"doc","deltas":[{"start":{"row":171,"column":0},"end":{"row":214,"column":33},"action":"remove","lines":["","def isPositionBetter(grid, snake, current, pathTo, to):","\t# Passes","\tcurrentPasses = 0","\ttoPasses = 0","\t","\t# New grid","\ttoGrid = copy.deepcopy(grid)","\t","\t# Loop over path and count","\tcurr = current","\tcount = 0","\twhile pathTo.goTo[curr]:\t\t#","\t\tcurr = pathTo.goTo[curr]","\t\tcount += 1","","\tx = len(snake['coords']) - count","\twhile x > 0:","\t\ttoGrid.obstruct(snake['coords'][x - 1])","\t\tx -= 1","","\tif len(snake['coords']) >= count:","\t\tcurr = current","\t\tcurr = pathTo.goTo[curr]","\t\twhile curr:","\t\t\ttoGrid.obstruct(curr)","\t\t\tcurr = pathTo.goTo[curr]","\telse:","\t\tcurr = current","\t\tcurr = pathTo.goTo[curr]","\t\tindex = 0","\t\twhile curr:","\t\t\tif index >= count - len(snake['coords']):","\t\t\t\ttoGrid.obstruct(curr)","\t\t\tcurr = pathTo.goTo[curr]","\t\t\tindex += 1","\t\t","\tfor _ in range(trapSamples):","\t\tgoal = grid.random()","\t\tif aStar(grid, current, goal):","\t\t\tcurrentPasses += 1","\t\tif aStar(toGrid, to, goal):","\t\t\ttoPasses += 1","\treturn toPasses >= currentPasses"]}]}],[{"group":"doc","deltas":[{"start":{"row":169,"column":26},"end":{"row":170,"column":3},"action":"remove","lines":["","\"\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":149,"column":0},"end":{"row":149,"column":3},"action":"remove","lines":["\"\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":170,"column":0},"end":{"row":171,"column":1},"action":"remove","lines":["","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":0},"end":{"row":24,"column":1},"action":"remove","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":258,"column":31},"end":{"row":258,"column":47},"action":"remove","lines":["isPositionBetter"]},{"start":{"row":258,"column":31},"end":{"row":258,"column":41},"action":"insert","lines":["isPathTrap"]}]}],[{"group":"doc","deltas":[{"start":{"row":258,"column":48},"end":{"row":258,"column":88},"action":"remove","lines":["ourSnake, tuple(ourSnake['coords'][0]), "]}]}],[{"group":"doc","deltas":[{"start":{"row":258,"column":55},"end":{"row":258,"column":61},"action":"remove","lines":[", goal"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":27},"end":{"row":242,"column":43},"action":"remove","lines":["isPositionBetter"]},{"start":{"row":242,"column":27},"end":{"row":242,"column":31},"action":"insert","lines":["isPa"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":31},"end":{"row":242,"column":33},"action":"insert","lines":["th"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":27},"end":{"row":242,"column":33},"action":"remove","lines":["isPath"]},{"start":{"row":242,"column":27},"end":{"row":242,"column":37},"action":"insert","lines":["isPathTrap"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":44},"end":{"row":242,"column":101},"action":"remove","lines":["ourSnake, tuple(ourSnake['coords'][0]), path, closestFood"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":44},"end":{"row":242,"column":48},"action":"insert","lines":["path"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":46},"end":{"row":242,"column":48},"action":"remove","lines":["th"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":44},"end":{"row":242,"column":46},"action":"remove","lines":["pa"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":27},"end":{"row":242,"column":37},"action":"remove","lines":["isPathTrap"]},{"start":{"row":242,"column":27},"end":{"row":242,"column":33},"action":"insert","lines":["isPath"]},{"start":{"row":242,"column":40},"end":{"row":242,"column":97},"action":"insert","lines":["ourSnake, tuple(ourSnake['coords'][0]), path, closestFood"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":32},"end":{"row":242,"column":33},"action":"remove","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":28},"end":{"row":242,"column":32},"action":"remove","lines":["sPat"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":27},"end":{"row":242,"column":28},"action":"remove","lines":["i"]},{"start":{"row":242,"column":27},"end":{"row":242,"column":43},"action":"insert","lines":["isPositionBetter"]},{"start":{"row":258,"column":48},"end":{"row":258,"column":88},"action":"insert","lines":["ourSnake, tuple(ourSnake['coords'][0]), "]},{"start":{"row":258,"column":95},"end":{"row":258,"column":101},"action":"insert","lines":[", goal"]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":0},"end":{"row":24,"column":1},"action":"insert","lines":["#"]},{"start":{"row":258,"column":31},"end":{"row":258,"column":41},"action":"remove","lines":["isPathTrap"]},{"start":{"row":258,"column":31},"end":{"row":258,"column":47},"action":"insert","lines":["isPositionBetter"]}]}],[{"group":"doc","deltas":[{"start":{"row":170,"column":0},"end":{"row":172,"column":0},"action":"insert","lines":["","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":171,"column":0},"end":{"row":214,"column":33},"action":"insert","lines":["","def isPositionBetter(grid, snake, current, pathTo, to):","\t# Passes","\tcurrentPasses = 0","\ttoPasses = 0","\t","\t# New grid","\ttoGrid = copy.deepcopy(grid)","\t","\t# Loop over path and count","\tcurr = current","\tcount = 0","\twhile pathTo.goTo[curr]:\t\t#","\t\tcurr = pathTo.goTo[curr]","\t\tcount += 1","","\tx = len(snake['coords']) - count","\twhile x > 0:","\t\ttoGrid.obstruct(snake['coords'][x - 1])","\t\tx -= 1","","\tif len(snake['coords']) >= count:","\t\tcurr = current","\t\tcurr = pathTo.goTo[curr]","\t\twhile curr:","\t\t\ttoGrid.obstruct(curr)","\t\t\tcurr = pathTo.goTo[curr]","\telse:","\t\tcurr = current","\t\tcurr = pathTo.goTo[curr]","\t\tindex = 0","\t\twhile curr:","\t\t\tif index >= count - len(snake['coords']):","\t\t\t\ttoGrid.obstruct(curr)","\t\t\tcurr = pathTo.goTo[curr]","\t\t\tindex += 1","\t\t","\tfor _ in range(trapSamples):","\t\tgoal = grid.random()","\t\tif aStar(grid, current, goal):","\t\t\tcurrentPasses += 1","\t\tif aStar(toGrid, to, goal):","\t\t\ttoPasses += 1","\treturn toPasses >= currentPasses"]}]}],[{"group":"doc","deltas":[{"start":{"row":149,"column":0},"end":{"row":149,"column":2},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":149,"column":2},"end":{"row":149,"column":3},"action":"insert","lines":["\""]}]}],[{"group":"doc","deltas":[{"start":{"row":170,"column":0},"end":{"row":170,"column":3},"action":"insert","lines":["\"\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":214,"column":17},"end":{"row":214,"column":19},"action":"remove","lines":[">="]},{"start":{"row":214,"column":17},"end":{"row":214,"column":18},"action":"insert","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":214,"column":17},"end":{"row":214,"column":18},"action":"remove","lines":[">"]},{"start":{"row":214,"column":17},"end":{"row":214,"column":18},"action":"insert","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":214,"column":18},"end":{"row":214,"column":19},"action":"insert","lines":["="]}]}],[{"group":"doc","deltas":[{"start":{"row":214,"column":17},"end":{"row":214,"column":19},"action":"remove","lines":[">="]},{"start":{"row":214,"column":17},"end":{"row":214,"column":18},"action":"insert","lines":["<"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":26},"end":{"row":96,"column":2},"action":"insert","lines":["","\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":96,"column":2},"end":{"row":96,"column":3},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":96,"column":3},"end":{"row":96,"column":7},"action":"insert","lines":["f ce"]}]}],[{"group":"doc","deltas":[{"start":{"row":96,"column":5},"end":{"row":96,"column":7},"action":"remove","lines":["ce"]}]}],[{"group":"doc","deltas":[{"start":{"row":96,"column":5},"end":{"row":96,"column":14},"action":"insert","lines":["self.cont"]}]}],[{"group":"doc","deltas":[{"start":{"row":96,"column":14},"end":{"row":96,"column":20},"action":"insert","lines":["ains(c"]}]}],[{"group":"doc","deltas":[{"start":{"row":96,"column":20},"end":{"row":96,"column":25},"action":"insert","lines":["ell):"]}]}],[{"group":"doc","deltas":[{"start":{"row":97,"column":0},"end":{"row":97,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":98,"column":1},"end":{"row":98,"column":2},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":325,"column":1},"end":{"row":325,"column":2},"action":"remove","lines":["#"]},{"start":{"row":326,"column":1},"end":{"row":326,"column":2},"action":"remove","lines":["#"]},{"start":{"row":327,"column":1},"end":{"row":327,"column":2},"action":"remove","lines":["#"]},{"start":{"row":328,"column":1},"end":{"row":328,"column":2},"action":"remove","lines":["#"]},{"start":{"row":329,"column":1},"end":{"row":329,"column":2},"action":"remove","lines":["#"]},{"start":{"row":330,"column":1},"end":{"row":330,"column":2},"action":"remove","lines":["#"]},{"start":{"row":331,"column":1},"end":{"row":331,"column":2},"action":"remove","lines":["#"]},{"start":{"row":332,"column":1},"end":{"row":332,"column":2},"action":"remove","lines":["#"]},{"start":{"row":333,"column":1},"end":{"row":333,"column":2},"action":"remove","lines":["#"]},{"start":{"row":334,"column":1},"end":{"row":334,"column":2},"action":"remove","lines":["#"]},{"start":{"row":335,"column":1},"end":{"row":335,"column":2},"action":"remove","lines":["#"]},{"start":{"row":336,"column":1},"end":{"row":336,"column":2},"action":"remove","lines":["#"]},{"start":{"row":337,"column":1},"end":{"row":337,"column":2},"action":"remove","lines":["#"]},{"start":{"row":338,"column":1},"end":{"row":338,"column":2},"action":"remove","lines":["#"]},{"start":{"row":339,"column":1},"end":{"row":339,"column":2},"action":"remove","lines":["#"]},{"start":{"row":340,"column":1},"end":{"row":340,"column":2},"action":"remove","lines":["#"]},{"start":{"row":341,"column":1},"end":{"row":341,"column":2},"action":"remove","lines":["#"]},{"start":{"row":342,"column":1},"end":{"row":342,"column":2},"action":"remove","lines":["#"]},{"start":{"row":343,"column":1},"end":{"row":343,"column":2},"action":"remove","lines":["#"]},{"start":{"row":344,"column":1},"end":{"row":344,"column":2},"action":"remove","lines":["#"]},{"start":{"row":345,"column":1},"end":{"row":345,"column":2},"action":"remove","lines":["#"]},{"start":{"row":346,"column":1},"end":{"row":346,"column":2},"action":"remove","lines":["#"]},{"start":{"row":347,"column":1},"end":{"row":347,"column":2},"action":"remove","lines":["#"]},{"start":{"row":348,"column":1},"end":{"row":348,"column":2},"action":"remove","lines":["#"]},{"start":{"row":349,"column":1},"end":{"row":349,"column":2},"action":"remove","lines":["#"]},{"start":{"row":350,"column":1},"end":{"row":350,"column":2},"action":"remove","lines":["#"]},{"start":{"row":351,"column":1},"end":{"row":351,"column":2},"action":"remove","lines":["#"]},{"start":{"row":352,"column":1},"end":{"row":352,"column":2},"action":"remove","lines":["#"]},{"start":{"row":353,"column":1},"end":{"row":353,"column":2},"action":"remove","lines":["#"]},{"start":{"row":354,"column":1},"end":{"row":354,"column":2},"action":"remove","lines":["#"]},{"start":{"row":355,"column":1},"end":{"row":355,"column":2},"action":"remove","lines":["#"]},{"start":{"row":356,"column":1},"end":{"row":356,"column":2},"action":"remove","lines":["#"]},{"start":{"row":357,"column":1},"end":{"row":357,"column":2},"action":"remove","lines":["#"]},{"start":{"row":358,"column":1},"end":{"row":358,"column":2},"action":"remove","lines":["#"]},{"start":{"row":359,"column":1},"end":{"row":359,"column":2},"action":"remove","lines":["#"]},{"start":{"row":360,"column":1},"end":{"row":360,"column":2},"action":"remove","lines":["#"]},{"start":{"row":361,"column":1},"end":{"row":361,"column":2},"action":"remove","lines":["#"]},{"start":{"row":362,"column":1},"end":{"row":362,"column":2},"action":"remove","lines":["#"]},{"start":{"row":363,"column":1},"end":{"row":363,"column":2},"action":"remove","lines":["#"]},{"start":{"row":364,"column":1},"end":{"row":364,"column":2},"action":"remove","lines":["#"]},{"start":{"row":365,"column":1},"end":{"row":365,"column":2},"action":"remove","lines":["#"]},{"start":{"row":366,"column":1},"end":{"row":366,"column":2},"action":"remove","lines":["#"]},{"start":{"row":367,"column":1},"end":{"row":367,"column":2},"action":"remove","lines":["#"]},{"start":{"row":368,"column":1},"end":{"row":368,"column":2},"action":"remove","lines":["#"]},{"start":{"row":369,"column":1},"end":{"row":369,"column":2},"action":"remove","lines":["#"]},{"start":{"row":370,"column":1},"end":{"row":370,"column":2},"action":"remove","lines":["#"]},{"start":{"row":371,"column":1},"end":{"row":371,"column":2},"action":"remove","lines":["#"]},{"start":{"row":372,"column":1},"end":{"row":372,"column":2},"action":"remove","lines":["#"]},{"start":{"row":373,"column":1},"end":{"row":373,"column":2},"action":"remove","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":333,"column":27},"end":{"row":334,"column":3},"action":"insert","lines":["","\t\ti"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":3},"end":{"row":334,"column":4},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":4},"end":{"row":334,"column":5},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":5},"end":{"row":334,"column":11},"action":"insert","lines":["checkL"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":11},"end":{"row":334,"column":13},"action":"insert","lines":["ef"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":5},"end":{"row":334,"column":13},"action":"remove","lines":["checkLef"]},{"start":{"row":334,"column":5},"end":{"row":334,"column":14},"action":"insert","lines":["checkLeft"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":14},"end":{"row":334,"column":20},"action":"insert","lines":[" and C"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":19},"end":{"row":334,"column":20},"action":"remove","lines":["C"]},{"start":{"row":334,"column":19},"end":{"row":334,"column":22},"action":"insert","lines":["che"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":22},"end":{"row":334,"column":25},"action":"insert","lines":["ckR"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":19},"end":{"row":334,"column":25},"action":"remove","lines":["checkR"]},{"start":{"row":334,"column":19},"end":{"row":334,"column":33},"action":"insert","lines":["checkRight and"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":33},"end":{"row":334,"column":39},"action":"insert","lines":[" Check"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":34},"end":{"row":334,"column":39},"action":"remove","lines":["Check"]},{"start":{"row":334,"column":34},"end":{"row":334,"column":37},"action":"insert","lines":["che"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":37},"end":{"row":334,"column":40},"action":"insert","lines":["ckU"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":34},"end":{"row":334,"column":40},"action":"remove","lines":["checkU"]},{"start":{"row":334,"column":34},"end":{"row":334,"column":42},"action":"insert","lines":["checkUp "]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":42},"end":{"row":334,"column":46},"action":"insert","lines":["and "]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":46},"end":{"row":334,"column":49},"action":"insert","lines":["che"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":49},"end":{"row":334,"column":50},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":50},"end":{"row":334,"column":51},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":46},"end":{"row":334,"column":51},"action":"remove","lines":["check"]},{"start":{"row":334,"column":46},"end":{"row":334,"column":59},"action":"insert","lines":["checkDirectio"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":57},"end":{"row":334,"column":59},"action":"remove","lines":["io"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":55},"end":{"row":334,"column":57},"action":"remove","lines":["ct"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":52},"end":{"row":334,"column":55},"action":"remove","lines":["ire"]},{"start":{"row":334,"column":52},"end":{"row":334,"column":55},"action":"insert","lines":["own"]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":55},"end":{"row":335,"column":3},"action":"insert","lines":[":","\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":3},"end":{"row":335,"column":10},"action":"insert","lines":["checkDi"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":10},"end":{"row":335,"column":18},"action":"insert","lines":["rection "]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":18},"end":{"row":335,"column":19},"action":"insert","lines":["="]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":19},"end":{"row":335,"column":24},"action":"insert","lines":[" True"]}]}],[{"group":"doc","deltas":[{"start":{"row":345,"column":26},"end":{"row":346,"column":4},"action":"insert","lines":["","\t\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":346,"column":3},"end":{"row":346,"column":4},"action":"remove","lines":["\t"]},{"start":{"row":346,"column":3},"end":{"row":346,"column":7},"action":"insert","lines":["else"]}]}],[{"group":"doc","deltas":[{"start":{"row":346,"column":7},"end":{"row":347,"column":4},"action":"insert","lines":[":","\t\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":347,"column":4},"end":{"row":347,"column":25},"action":"insert","lines":["checkDirection = True"]}]}],[{"group":"doc","deltas":[{"start":{"row":357,"column":26},"end":{"row":358,"column":3},"action":"insert","lines":["","\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":358,"column":3},"end":{"row":359,"column":25},"action":"insert","lines":["else:","\t\t\t\tcheckDirection = True"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":26},"end":{"row":371,"column":25},"action":"insert","lines":["","\t\t\telse:","\t\t\t\tcheckDirection = True"]}]}],[{"group":"doc","deltas":[{"start":{"row":381,"column":26},"end":{"row":383,"column":25},"action":"insert","lines":["","\t\t\telse:","\t\t\t\tcheckDirection = True"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":10,"column":163},"end":{"row":10,"column":163},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1424556984000}